<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <LangVersion>Preview</LangVersion>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyName>Devlooped.Extensions.DependencyInjection</AssemblyName>
    <PackageId>Devlooped.Extensions.DependencyInjection</PackageId>
    <Title>
      Automatic compile-time service registrations for Microsoft.Extensions.DependencyInjection with no run-time dependencies, from conventions or attributes.
    </Title>
    <Description>$(Title)</Description>
    <PackFolder>analyzers/dotnet</PackFolder>
    <IsRoslynComponent>true</IsRoslynComponent>
    <DevelopmentDependency>true</DevelopmentDependency>
    <DefineConstants>$(DefineConstants);DDI_ADDSERVICE;DDI_ADDSERVICES</DefineConstants>
    <ImplicitUsings>false</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Bcl.TimeProvider" Version="9.0.6" />
    <PackageReference Include="NuGetizer" Version="1.2.4" />
    <PackageReference Include="Microsoft.Bcl.HashCode" Version="6.0.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.14.0" Pack="false" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.6" />
    <PackageReference Include="PolySharp" Version="1.15.0" PrivateAssets="all" />
    <PackageReference Include="ThisAssembly.Resources" Version="2.0.14" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <None Update="Devlooped.Extensions.DependencyInjection.props" CopyToOutputDirectory="PreserveNewest" PackFolder="build\netstandard2.0" />
    <None Update="Devlooped.Extensions.DependencyInjection.targets" CopyToOutputDirectory="PreserveNewest" PackFolder="build\netstandard2.0" />
    <None Include="compile\*.cs" CopyToOutputDirectory="PreserveNewest" PackFolder="build\netstandard2.0" />
    <EmbeddedCode Include="compile\*.cs" />
  </ItemGroup>

  <PropertyGroup Label="SponsorLink">
    <CustomAfterMicrosoftCSharpTargets>$(MSBuildThisFileDirectory)..\SponsorLink\SponsorLink.Analyzer.targets</CustomAfterMicrosoftCSharpTargets>
    <!-- We also bring in the additional packages that just customize ThisAssembly.Constants -->
    <FundingPackageId>$(PackageId)</FundingPackageId>
  </PropertyGroup>

  <Target Name="CopyEmbeddedCode" Inputs="@(EmbeddedCode)" Outputs="@(EmbeddedCode -> '$(IntermediateOutputPath)%(Filename).txt')">
    <Copy SourceFiles="@(EmbeddedCode)" DestinationFiles="@(EmbeddedCode -> '$(IntermediateOutputPath)%(Filename).txt')" SkipUnchangedFiles="true" />
   </Target>

  <Target Name="AddEmbeddedResources" DependsOnTargets="CopyEmbeddedCode" BeforeTargets="SplitResourcesByCulture">
    <ItemGroup>
      <EmbeddedResource Include="@(EmbeddedCode -> '$(IntermediateOutputPath)%(Filename).txt')" Link="%(EmbeddedCode.Filename).txt" Type="Non-Resx" />
    </ItemGroup>
  </Target>

  <Target Name="PokePackageVersion" BeforeTargets="GetPackageContents" DependsOnTargets="CopyFilesToOutputDirectory" Condition="'$(dotnet-nugetize)' == '' and Exists('$(OutputPath)\Devlooped.Extensions.DependencyInjection.props')">
    <XmlPoke XmlInputPath="$(OutputPath)\Devlooped.Extensions.DependencyInjection.props" Query="/Project/PropertyGroup/DevloopedExtensionsDependencyInjectionVersion" Value="$(PackageVersion)" />
  </Target>

  <UsingTask TaskName="XmlPoke" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Namespaces />
      <Query />
      <Value ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <XmlInputPath ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="System.Xml.XPath" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[			
            var xmlns = new XmlNamespaceManager(new NameTable());
            if (!string.IsNullOrEmpty(Namespaces))
            {
                using (var reader = XmlReader.Create(new StringReader(Namespaces), new XmlReaderSettings { ConformanceLevel = ConformanceLevel.Fragment }))
                {
                    while (reader.Read())
                    {
                        var prefix = reader.GetAttribute("Prefix");
                        var uri = reader.GetAttribute("Uri");
                        xmlns.AddNamespace(prefix, uri);
                    }
                }
            }

            var doc = XDocument.Load(XmlInputPath.GetMetadata("FullPath"), LoadOptions.PreserveWhitespace);
			var expr = doc.CreateNavigator().Compile(Query);
			expr.SetContext (xmlns);

			var replacements = 0;
            foreach (var node in doc.CreateNavigator().Select(expr).OfType<XPathNavigator>().Select(x => x.UnderlyingObject))
            {
				var attr = node as XAttribute;
				var elem = node as XElement;
				if (attr != null) {
					attr.SetValue (Value.ItemSpec);
					replacements++;
				} else if (elem != null) {
					elem.SetValue (Value.ItemSpec);
					replacements++;
				}
            }

			if (replacements != 0) {
				Log.LogMessage ("Made {0} replacement(s).", replacements);
				doc.Save(XmlInputPath.GetMetadata ("FullPath"), SaveOptions.DisableFormatting);
			} else {
				Log.LogMessage("No nodes were affected.");
			}
			]]>
      </Code>
    </Task>
  </UsingTask>
  
</Project>
